mutate(site = case_when (site %in% c("Veteran's Home" ) ~ "Veterans", TRUE ~ site))
#| message: true
#| echo: FALSE
library(dplyr)
library(tidyr)
library(lubridate)
library(readr)
library(lme4)
library(lmerTest)
library(ggplot2)
library(emmeans)
library(MASS)
#| echo: true
#| warning: true
bee_data <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_02-18_data.csv")
bee_traits <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_traits.csv", header = T)
site_data <-read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sites.csv", header = T)
#This is the file for removing dates
dates_to_drop <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/02_03_18_datestodrop.csv", header = T)
#| echo: true
#| warning: true
str(bee_data)
#Fix site names
bee_data_1 <- bee_data %>%
mutate(site = case_when (site %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Stag's leap", "Stags Leap", "Stag's Leap" ) ~ "Stags", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Veteran's Home" ) ~ "Veterans", TRUE ~ site))
#Reformat dates
bee_data_clean <- bee_data_1 %>% mutate(start_date = mdy(start_date))
dates_to_drop$date <- dates_to_drop %>% mutate(date = mdy(date))
#create new variable that combines the genus and species name
bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")
# Remove all records that are not in the sample dates
bee_data_clean <- bee_data_clean %>%
filter(start_date %in% dates_to_drop$date)
# Filter 'bee_data_clean' to exclude rows matching site and date combinations in 'dates_to_drop'
filtered_data <- bee_data_clean %>%
anti_join(dates_to_drop, by = c("site", "date"))
filtered_data <- bee_data_clean %>%
anti_join(dates_to_drop, by = c("site" = "site", "start_date" = "date"))
#| echo: true
#| warning: true
bee_data <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_02-18_data.csv")
bee_traits <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_traits.csv", header = T)
site_data <-read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sites.csv", header = T)
#This is the file for removing dates
dates_to_drop <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/02_03_18_datestodrop.csv", header = T)
#| echo: true
#| warning: true
#Fix site names
bee_data_clean <- bee_data %>%
mutate(site = case_when (site %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Stag's leap", "Stags Leap", "Stag's Leap" ) ~ "Stags", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Veteran's Home" ) ~ "Veterans", TRUE ~ site))
#Reformat dates
bee_data_clean <- bee_data_clean %>% mutate(start_date = mdy(start_date))
dates_to_drop$date <- dates_to_drop %>% mutate(date = mdy(date))
#create new variable that combines the genus and species name
bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")
# Filter 'bee_data_clean' to exclude rows matching site and date combinations in 'dates_to_drop'
filtered_data <- bee_data_clean %>%
anti_join(dates_to_drop, by = c("site" = "site", "start_date" = "date"))
#This is the file for removing dates
dates_to_drop <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/02_03_18_datestodrop.csv", header = T)
dates_to_drop$date <- dates_to_drop %>% mutate(date = mdy(date))
dates_to_drop <- dates_to_drop %>% mutate(date = mdy(date))
#| echo: true
#| warning: true
#Fix site names
bee_data_clean <- bee_data %>%
mutate(site = case_when (site %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Stag's leap", "Stags Leap", "Stag's Leap" ) ~ "Stags", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Veteran's Home" ) ~ "Veterans", TRUE ~ site))
#Reformat dates
bee_data_clean <- bee_data_clean %>% mutate(start_date = mdy(start_date))
dates_to_drop <- dates_to_drop %>% mutate(date = mdy(date))
#This is the file for removing dates
dates_to_drop <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/02_03_18_datestodrop.csv", header = T)
dates_to_drop <- dates_to_drop %>% mutate(date = mdy(date))
#create new variable that combines the genus and species name
bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")
# Filter 'bee_data_clean' to exclude rows matching site and date combinations in 'dates_to_drop'
filtered_data <- bee_data_clean %>%
anti_join(dates_to_drop, by = c("site" = "site", "start_date" = "date"))
# # Create a table summarizing the number of dates per site
date_count_table <- dates_to_drop%>%
count(site, name = "number_of_dates")  # Count the number of dates for each site
# Create a table summarizing the number of dates per site in bee_data_1
unique_dates_count <- bee_data_1 %>%
group_by(site) %>%
summarize(unique_dates = n_distinct(date))
# # Create a table summarizing the number of dates per site
date_count_table <- dates_to_drop%>%
count(site, name = "number_of_dates")  # Count the number of dates for each site
# Create a table summarizing the number of dates per site in bee_data_clean
unique_dates_count <- bee_data_clean %>%
group_by(site) %>%
summarize(unique_dates = n_distinct(date))
# Create a table summarizing the number of dates per site in bee_data_clean
unique_dates_count <- bee_data_clean %>%
group_by(site) %>%
summarize(unique_dates = n_distinct(start_date))
View(date_count_table)
View(unique_dates_count)
sites_summary <- bee_data_clean %>%
group_by (site, year) %>%
summarise(sampling_events = length(unique(start_date)), no_spp = length(unique(combined_name)), abund = sum(number))
sites_summary <- sites_summary %>%
left_join(site_data, by = "site")
sites_summary
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_sprich <- lmer(no_spp ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_sprich)
# Extract p-values
p_values <- summary(model_sprich)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_sprich), main = "Residuals-Species richness")
hist(resid(model_sprich), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_sprich))
qqline(resid(model_sprich), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_sprich, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_sprich <- emmeans(model_sprich, ~ year * treatment)
plot(emm_sprich)
pairs(emm_sprich)
# Convert to data frame for ggplot
emm_sprich_df <- as.data.frame(emm_sprich)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Species Richness by Treatment and Year",
x = "Year",
y = "Estimated Species Richness (no_spp)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Response variable abundance
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_abund <- lmer(abund ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_abund)
# Extract p-values
p_values <- summary(model_abund)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_abund), main = "Residuals-Species richness")
hist(resid(model_abund), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_abund))
qqline(resid(model_abund), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_abund, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_abund <- emmeans(model_abund, ~ year * treatment)
plot(emm_abund)
pairs(emm_abund)
# Convert to data frame for ggplot
emm_abund_df <- as.data.frame(emm_abund)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Abundance by Treatment and Year",
x = "Year",
y = "Estimated Abundance (no_specimens)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Create a table summarizing the number of dates per site in bee_data_clean
unique_dates_filtered <- filtered_data %>%
group_by(site) %>%
summarize(unique_dates = n_distinct(start_date))
sites_summary <- filtered_data %>%
group_by (site, year) %>%
summarise(sampling_events = length(unique(start_date)), no_spp = length(unique(combined_name)), abund = sum(number))
sites_summary <- sites_summary %>%
left_join(site_data, by = "site")
sites_summary
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_sprich <- lmer(no_spp ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_sprich)
# Extract p-values
p_values <- summary(model_sprich)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_sprich), main = "Residuals-Species richness")
hist(resid(model_sprich), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_sprich))
qqline(resid(model_sprich), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_sprich, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_sprich <- emmeans(model_sprich, ~ year * treatment)
plot(emm_sprich)
pairs(emm_sprich)
# Convert to data frame for ggplot
emm_sprich_df <- as.data.frame(emm_sprich)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Species Richness by Treatment and Year",
x = "Year",
y = "Estimated Species Richness (no_spp)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Response variable abundance
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_abund <- lmer(abund ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_abund)
# Extract p-values
p_values <- summary(model_abund)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_abund), main = "Residuals-Species richness")
hist(resid(model_abund), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_abund))
qqline(resid(model_abund), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_abund, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_abund <- emmeans(model_abund, ~ year * treatment)
plot(emm_abund)
pairs(emm_abund)
# Convert to data frame for ggplot
emm_abund_df <- as.data.frame(emm_abund)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Abundance by Treatment and Year",
x = "Year",
y = "Estimated Abundance (no_specimens)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
#Create the data frame - you can choose which data set to use here
sites_summary <- bee_data_clean %>%
group_by (site, year) %>%
summarise(sampling_events = length(unique(start_date)), no_spp = length(unique(combined_name)), abund = sum(number))
sites_summary <- sites_summary %>%
left_join(site_data, by = "site")
sites_summary
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_sprich <- lmer(no_spp ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_sprich)
# Extract p-values
p_values <- summary(model_sprich)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_sprich), main = "Residuals-Species richness")
hist(resid(model_sprich), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_sprich))
qqline(resid(model_sprich), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_sprich, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_sprich <- emmeans(model_sprich, ~ year * treatment)
plot(emm_sprich)
pairs(emm_sprich)
# Convert to data frame for ggplot
emm_sprich_df <- as.data.frame(emm_sprich)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Species Richness by Treatment and Year",
x = "Year",
y = "Estimated Species Richness (no_spp)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Response variable abundance
# Ensure 'year' is a factor and set 2018 as the reference level
sites_summary$year <- factor(sites_summary$year, levels = c("2018", "2002", "2003"))
# Fit the mixed model
model_abund <- lmer(abund ~ year * treatment + (1 | site) + offset(log(sampling_events)),
data = sites_summary)
# Summary of the model
summary(model_abund)
# Extract p-values
p_values <- summary(model_abund)$coefficients[, "Pr(>|t|)"]
# Print p-values
print(p_values)
# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_abund), main = "Residuals-Species richness")
hist(resid(model_abund), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_abund))
qqline(resid(model_abund), col = "red")
# Here we plot the estimated means for each group for species richness
# Perform pairwise comparisons using emmeans
emm <- emmeans(model_abund, ~ year | treatment)
pairwise_results <- pairs(emm)
# Print the pairwise comparisons
print(pairwise_results)
# Extract estimated marginal means for plotting
emm_data <- as.data.frame(emm)
emm_abund <- emmeans(model_abund, ~ year * treatment)
plot(emm_abund)
pairs(emm_abund)
# Convert to data frame for ggplot
emm_abund_df <- as.data.frame(emm_abund)
# Ensure 'year' is ordered chronologically for plotting
emm_data$year <- factor(emm_data$year, levels = c("2002", "2003", "2018"))
# Create the plot with reordered years
ggplot(emm_data, aes(x = year, y = emmean, color = treatment, group = treatment)) +
geom_point(size = 3) +
geom_line(aes(linetype = treatment), size = 1) +
geom_errorbar(aes(ymin = emmean - SE, ymax = emmean + SE), width = 0.2) +
labs(
title = "Change in Abundance by Treatment and Year",
x = "Year",
y = "Estimated Abundance (no_specimens)"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
#| message: true
#| echo: FALSE
library(dplyr)
library(tidyr)
library(lubridate)
library(readr)
library(lme4)
library(lmerTest)
library(ggplot2)
library(emmeans)
library(MASS)
#| message: true
library(dplyr)
library(tidyr)
library(lubridate)
library(readr)
library(lme4)
library(lmerTest)
library(ggplot2)
library(emmeans)
library(MASS)
#| echo: true
#| warning: true
bee_data <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_02-18_data.csv")
bee_traits <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_traits.csv", header = T)
site_data <-read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sites.csv", header = T)
#This is not the right file for removing dates
#dates_to_keep <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sample_dates_tokeep_02-18.csv", header = T)
#| echo: true
#| warning: true
#Fix site names
bee_data_1 <- bee_data %>%
mutate(site = case_when (site %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Stag's leap", "Stags Leap", "Stag's Leap" ) ~ "Stags", TRUE ~ site)) %>%
mutate(site = case_when (site %in% c("Veteran's Home" ) ~ "Veterans", TRUE ~ site))
bee_data_clean <- bee_data_1 %>% mutate(start_date = mdy(start_date))
#dates_to_keep <- dates_to_keep %>% mutate(date = mdy(date))
# # # Create a table summarizing the number of dates per site
# # date_count_table <- dates_to_keep%>%
# #   count(site, name = "number_of_dates")  # Count the number of dates for each site
# #
# # # Create a table summarizing the number of dates per site in bee_data_1
# # unique_dates_count <- bee_data_1 %>%
# #   group_by(site) %>%
# #   summarize(unique_dates = n_distinct(date))
# #
# #
# # # Filter the bee data to only include records from the sample dates
# # bee_data_clean <- bee_data_1 %>%
# #   semi_join(dates_to_keep, by = c("start_date" = "date"))
#
# # bee_data_clean <- merge(bee_data_1, dates_to_keep, by = c("site", "start_date" = "date"))
#
# # Create a table summarizing the number of dates per site in bee data clean
# filtered_samples_site_date <- bee_data_clean %>%
#   group_by(site, start_date) %>%
#   summarize(bes = n())
# samples_site_date <- bee_data_1 %>%
#   group_by(site, start_date) %>%
#   summarize(bes = n())
#
# #Check that samples are still correct
#
# sample_count_table <- bee_data_clean %>%
#   group_by(site) %>%
#   summarize(dates_sampled = n_distinct(date))
#
# # Create a table with the dates for each site
# dates_per_site <- bee_data_clean %>%
#   group_by(site) %>%
#   summarize(dates = list(unique(date)))
#
# # View the dates for each site as a list with headers
# for (i in 1:nrow(dates_per_site)) {
#   cat("\nSite:", dates_per_site$site[i], "\n")
#   cat(paste(dates_per_site$dates[[i]], collapse = "\n"), "\n")
# }
#create new variable that combines the genus and species name
bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")
sites_summary <- bee_data_clean %>%
group_by (site, year) %>%
summarise(sampling_events = length(unique(start_date)), no_spp = length(unique(combined_name)), abund = sum(number))
sites_summary <- sites_summary %>%
left_join(site_data, by = "site")
sites_summary
## Poisson regression model
# Convert Year and treatment to factors
sites_summary$treatment <- factor(sites_summary$treatment)
# Fit a Poisson regression model with an offset for sampling effort
poisson_model <- glmer(no_spp ~ treatment * year + (1 | site) + offset(log(sampling_events)),
data = sites_summary,
family = poisson(link = "log"))
# Summary of the model
summary(poisson_model)
# Check for overdispersion
overdispersion_test <- sum(residuals(poisson_model, type = "pearson")^2) / df.residual(poisson_model)
print(paste("Overdispersion ratio of poisson:", overdispersion_test))
# Fit a negative binomial model with an offset for sampling effort
nb_model <- glm.nb(no_spp ~ treatment * year + offset(log(sampling_events)),
data = sites_summary)
