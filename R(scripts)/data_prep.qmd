---
title: "napa_network_analysis"
format: html
editor: visual
---

## Napa Sonoma bee resurvey

```{r}

#| message: true

library(dplyr)
library(tidyr)
library(readr)
library(lme4)
library(lmerTest)  
library(ggplot2)
library(emmeans)
library(MASS)
```

### Read in data

```{r}
#| echo: true
#| warning: true

bee_data <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_02-18_data.csv", header = T)

bee_traits <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_traits.csv", header = T)

site_data <-read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sites.csv", header = T)

```

### Review data properties

```{r}
#| echo: true
#| warning: true

str(bee_data)
unique(bee_data$locality)
```

###Clean dataset

Clean data set by correcting spelling for Stag's Leap and Wappo Hill preserving a subset of the columns, removing sites that were not sampled in all years and changing start_date to a date class and remove sample from 2001

Check that numbers of bees per site agree after spelling correction and other modifications.

```{r}

#| echo: true
#| warning: true

sampled_localities <- c("Bouverie Preserve",
                          "Hudson",
                          "Saintsbury",
                          "Goode",
                          "StagsLeap",
                          "Wappo",
                          "Quintessa",
                          "Veteran's Home")

bee_data_clean <- bee_data %>%

  mutate(site = case_when (locality %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ locality)) %>%

   mutate(site = case_when (site %in% c("Stag's leap", "Stag's Leap" ) ~ "StagsLeap", TRUE ~ site)) %>%

  dplyr::select (genus_name, species, site, start_date, type, year, number) %>%
  filter (site %in% sampled_localities ) %>%
  filter(!(year %in% c(2001))) %>%
  mutate (start_date = as.Date(start_date, format="%m/%d/%y") )
  

head(bee_data_clean)


#create new variable that combines the genus and species name

bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")

#Check that samples are still correct

bee_data_clean %>% 
  group_by(site) %>% 
  summarize(count_bees = sum(number))

bee_data %>% 
  group_by(locality) %>% 
  summarize(count_bees = sum(number))


```

###Create data frame for BACI analysis

```{r}
sites_summary <- bee_data_clean %>%
group_by (site, year) %>%
    summarise(sampling_events = length(unique(start_date)), no_spp = length(unique(combined_name)), abund = sum(number))

sites_summary <- sites_summary %>%
  left_join(site_data, by = "site")

sites_summary


```

###Analyze using a linear mixed effects model

Analyze the data using the `lmer()` function to fit a linear mixed-effects model where:

-   `no_spp` is the response variable.

-   `treatment` and `year` are fixed effects, and their interaction is included to assess the BACI impact.

-   `sampling_events` is included as a covariate.

-   `(1 | site)` indicates that Site is a random effect to account for variability among sites.

```{r}
# Convert Year to a factor for categorical analysis
sites_summary$year <- factor(sites_summary$year)

# Fit a mixed-effects model
model_sprich <- lmer(no_spp ~ year * treatment + sampling_events + (1 | site), data = sites_summary)

# Summary of the model
summary(model_sprich)

# Extract p-values
p_values <- summary(model_sprich)$coefficients[, "Pr(>|t|)"]

# Print p-values
print(p_values)


# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_sprich), main = "Residuals-Species richness")
hist(resid(model_sprich), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_sprich))
qqline(resid(model_sprich), col = "red")


# Here we plot the estimated means for each group for species richness

emm_sprich <- emmeans(model_sprich, ~ year * treatment)
plot(emm_sprich)
pairs(emm_sprich)

# Convert to data frame for ggplot
emm_sprich_df <- as.data.frame(emm_sprich)

# Plot the results
plot_spprich <- ggplot(emm_sprich_df, aes(x = year, y = emmean, color = treatment)) +
  geom_point(size = 3) +
  geom_line(aes(group = treatment), size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  labs(title = "Estimated Marginal Means - Species richness",
       x = "Year",
       y = "Estimated Mean Value",
       color = "treatment") +
  theme_minimal()

plot_spprich



```

Analyze the abundance in the same way.

```{r}

# Response variable abundance

# Fit a mixed-effects model
model_abund <- lmer(abund ~ year * treatment + sampling_events + (1 | site), data = sites_summary)

# Summary of the model
summary(model_abund)

# Extract p-values
p_values <- summary(model_abund)$coefficients[, "Pr(>|t|)"]

# Print p-values
print(p_values)

# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_abund), main = "Residuals-Abundance")
hist(resid(model_abund), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_abund))
qqline(resid(model_abund), col = "red")
# Here we plot the estimated means for each group for abundance
emm_abund <- emmeans(model_abund, ~ year * treatment)
#pairs(emm_abund)

# Convert to data frame for ggplot
emm_abund_df <- as.data.frame(emm_abund)

# Plot the results
plot_abund <- ggplot(emm_abund_df, aes(x = year, y = emmean, color = treatment)) +
  geom_point(size = 3) +
  geom_line(aes(group = treatment), size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  labs(title = "Estimated Marginal Means - Abundance",
       x = "Year",
       y = "Estimated Mean Value",
       color = "treatment") +
  theme_minimal()

plot_abund
```

###Analyze species richness using a poisson regression

```{r}
## Poisson regression model

# Convert Year and treatment to factors

sites_summary$treatment <- factor(sites_summary$treatment)

# Fit a Poisson regression model
poisson_model <- glmer(no_spp ~ treatment * year + sampling_events + (1 | site), data = sites_summary, family = poisson(link ="log"))

# Summary of the model
summary(poisson_model)

# Check for overdispersion
overdispersion_test <- sum(residuals(poisson_model, type = "pearson")^2) / df.residual(poisson_model)
print(paste("Overdispersion ratio of poisson:", overdispersion_test))

# Fit a negative binomial model
nb_model <- glm.nb(no_spp ~ treatment * year + sampling_events, data = sites_summary)


```

####Redo the analysis using a negative binomial

```{r}

# Summary of the negative binomial model
summary(nb_model)

# Extracting p-values
p_values <- summary(nb_model)$coefficients[, "Pr(>|z|)"]
print(p_values)

# Check for overdispersion
overdispersion_test <- sum(residuals(nb_model, type = "pearson")^2) / df.residual(nb_model)
print(paste("Overdispersion ratio:", overdispersion_test))




```
#### Poisson model of abundance

```{r}


## Poisson regression model

# Convert Year and treatment to factors

sites_summary$treatment <- factor(sites_summary$treatment)

# Fit a Poisson regression model
poisson_model <- glmer(abund ~ treatment * year + sampling_events + (1 | site), data = sites_summary, family = poisson(link ="log"))

# Summary of the model
summary(poisson_model)

# Check for overdispersion
overdispersion_test <- sum(residuals(poisson_model, type = "pearson")^2) / df.residual(poisson_model)
print(paste("Overdispersion ratio of poisson:", overdispersion_test))


```
#### Negative binomial model of abundance.


```{r}
# Fit a negative binomial model
nb_model <- glm.nb(no_spp ~ treatment * year + sampling_events, data = sites_summary)

# Summary of the negative binomial model
summary(nb_model)

# Extracting p-values
p_values <- summary(nb_model)$coefficients[, "Pr(>|z|)"]
print(p_values)

# Check for overdispersion
overdispersion_test <- sum(residuals(nb_model, type = "pearson")^2) / df.residual(nb_model)
print(paste("Overdispersion ratio:", overdispersion_test))
```
