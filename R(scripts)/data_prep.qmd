---
title: "napa_network_analysis"
format: html
editor: visual
---

## Napa Sonoma bee resurvey

```{r}

#| message: true

library(dplyr)
library(tidyr)
library(lubridate)
library(readr)
library(lme4)
library(lmerTest)  
library(ggplot2)
library(emmeans)
library(MASS)
```

### Read in data

```{r}
#| echo: true
#| warning: true

bee_data <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_02-18_data.csv") %>%
    mutate(date = as.Date(start_date, format = "%m/%d/%y"))

bee_traits <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/bee_traits.csv", header = T)

site_data <-read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sites.csv", header = T)

dates_to_keep <- read.csv("/Users/gretchen/Library/CloudStorage/Box-Box/1. Lab research/napabees/2024_update/data/raw/sample_dates_tokeep_02-18.csv", header = T)

```

### Review data properties

```{r}
#| echo: true
#| warning: true

str(bee_data)
unique(bee_data$locality)
```

###Clean dataset

Clean data set by correcting spelling for Stag's Leap and Wappo Hill preserving a subset of the columns, filter the sites to only those sites that were sampled in similar timeblocks.

Check that numbers of bees per site agree after spelling correction and other modifications.

```{r}

#| echo: true
#| warning: true

#Fix site names
bee_data_1 <- bee_data %>%

   mutate(site = case_when (site %in% c("Wappo Hill", "Wappo hill" ) ~ "Wappo", TRUE ~ site)) %>%
   mutate(site = case_when (site %in% c("Stag's leap", "Stag's Leap" ) ~ "StagsLeap", TRUE ~ site)) 
   


# Create a list of valid dates for each site from the sample dates file
sample_dates <- data.frame(
  site = c(
    rep("Bouverie Preserve", 21),
    rep("Hudson", 18),
    rep("Saintsbury", 19),
    rep("Quintessa", 18),
    rep("Veteran's Home", 21),
    rep("Goode", 21),
    rep("Stag's Leap", 21),
    rep("Wappo Hill", 21)
  ),
  date = c(
    # Bouverie Preserve dates
    mdy(c("4/1/02", "5/10/02", "5/31/02", "6/24/02", "7/22/02", "8/5/02", 
          "8/20/02", "4/20/03", "5/15/03", "5/31/03", "6/27/03", "7/24/03",
          "8/9/03", "8/21/03", "3/28/18", "5/7/18", "5/16/18", "6/20/18",
          "7/18/18", "8/8/18", "8/20/18")),
    # Hudson dates
    mdy(c("4/18/02", "5/17/02", "6/4/02", "6/27/02", "7/26/02", "8/7/02",
          "4/17/03", "5/15/03", "6/4/03", "6/27/03", "7/10/03", "7/24/03",
          "4/19/18", "5/16/18", "6/3/18", "6/24/18", "7/9/18", "7/23/18")),
    # Saintsbury dates
    mdy(c("4/18/02", "5/17/02", "6/4/02", "6/27/02", "7/10/02", "7/26/02",
          "8/7/02", "4/24/03", "5/15/03", "6/4/03", "6/27/03", "7/10/03",
          "7/24/03", "8/9/03", "4/19/18", "5/16/18", "6/3/18", "6/24/18",
          "7/9/18")),
    # Quintessa dates
    mdy(c("4/19/02", "5/3/02", "5/23/02", "6/18/02", "7/17/02", "7/29/02",
          "4/20/03", "5/4/03", "5/18/03", "6/15/03", "7/12/03", "7/27/03",
          "4/8/18", "5/9/18", "5/23/18", "6/18/18", "7/18/18", "8/1/18")),
    # Veteran's Home dates
    mdy(c("4/19/02", "5/22/02", "6/3/02", "7/1/02", "7/16/02", "7/31/02",
          "8/12/02", "4/13/03", "5/18/03", "6/15/03", "6/29/03", "7/12/03",
          "7/27/03", "8/8/03", "4/11/18", "5/23/18", "6/15/18", "6/24/18",
          "7/11/18", "7/25/18", "8/8/18")),
    # Goode dates
    mdy(c("4/22/02", "5/13/02", "6/10/02", "6/25/02", "7/8/02", "7/23/02",
          "8/21/02", "4/24/03", "5/15/03", "6/13/03", "6/27/03", "7/10/03",
          "7/24/03", "8/21/03", "5/7/18", "5/16/18", "6/20/18", "6/30/18",
          "7/18/18", "7/30/18", "8/20/18")),
    # Stag's Leap dates
    mdy(c("5/6/02", "5/24/02", "6/17/02", "7/3/02", "7/15/02", "7/31/02",
          "8/26/02", "5/4/03", "5/18/03", "6/15/03", "6/29/03", "7/12/03",
          "7/27/03", "9/7/03", "5/9/18", "5/23/18", "6/18/18", "7/1/18",
          "7/11/18", "7/25/18", "9/13/18")),
    # Wappo Hill dates
    mdy(c("5/10/02", "5/24/02", "6/17/02", "7/3/02", "7/15/02", "7/31/02",
          "8/26/02", "5/4/03", "5/18/03", "6/15/03", "6/29/03", "7/12/03",
          "7/27/03", "8/24/03", "5/9/18", "5/23/18", "6/18/18", "7/1/18",
          "7/11/18", "7/25/18", "8/22/18"))
  )
)

# Filter the bee data to only include records from the sample dates
bee_data_clean <- bee_data_1 %>%
  semi_join(sample_dates, by = c("site", "date"))


head(bee_data_clean)


#create new variable that combines the genus and species name

bee_data_clean$combined_name <- paste(bee_data_clean$genus_name,bee_data_clean$species, sep=" ")

#Check that samples are still correct
cols <- c("year","site")
bee_data_clean %>% 
  group_by(across(all_of(cols))) %>% 
  summarize(count_bees = sum(number))


```

###Create data frame for BACI analysis

```{r}
sites_summary <- bee_data_clean %>%
group_by (site, year) %>%
    summarise(sampling_events = length(unique(date)), no_spp = length(unique(combined_name)), abund = sum(number))

sites_summary <- sites_summary %>%
  left_join(site_data, by = "site")

sites_summary


```

###Analyze using a linear mixed effects model

Analyze the data using the `lmer()` function to fit a linear mixed-effects model where:

-   `no_spp` is the response variable.

-   `treatment` and `year` are fixed effects, and their interaction is included to assess the BACI impact.

-   `sampling_events` is included as a covariate.

-   `(1 | site)` indicates that Site is a random effect to account for variability among sites.

```{r}
# Convert Year to a factor for categorical analysis
sites_summary$year <- factor(sites_summary$year)

# Fit a mixed-effects model
model_sprich <- lmer(no_spp ~ year * treatment + sampling_events + (1 | site), data = sites_summary)

# Summary of the model
summary(model_sprich)

# Extract p-values
p_values <- summary(model_sprich)$coefficients[, "Pr(>|t|)"]

# Print p-values
print(p_values)


# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_sprich), main = "Residuals-Species richness")
hist(resid(model_sprich), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_sprich))
qqline(resid(model_sprich), col = "red")


# Here we plot the estimated means for each group for species richness

emm_sprich <- emmeans(model_sprich, ~ year * treatment)
plot(emm_sprich)
pairs(emm_sprich)

# Convert to data frame for ggplot
emm_sprich_df <- as.data.frame(emm_sprich)

# Plot the results
plot_spprich <- ggplot(emm_sprich_df, aes(x = year, y = emmean, color = treatment)) +
  geom_point(size = 3) +
  geom_line(aes(group = treatment), size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  labs(title = "Estimated Marginal Means - Species richness",
       x = "Year",
       y = "Estimated Mean Value",
       color = "treatment") +
  theme_minimal()

plot_spprich



```

Analyze the abundance in the same way.

```{r}

# Response variable abundance

# Fit a mixed-effects model
model_abund <- lmer(abund ~ year * treatment + sampling_events + (1 | site), data = sites_summary)

# Summary of the model
summary(model_abund)

# Extract p-values
p_values <- summary(model_abund)$coefficients[, "Pr(>|t|)"]

# Print p-values
print(p_values)

# Plot residuals for diagnostic checking
par(mfrow = c(2, 2))
plot(resid(model_abund), main = "Residuals-Abundance")
hist(resid(model_abund), main = "Histogram of Residuals", xlab = "Residuals")
qqnorm(resid(model_abund))
qqline(resid(model_abund), col = "red")
# Here we plot the estimated means for each group for abundance
emm_abund <- emmeans(model_abund, ~ year * treatment)
#pairs(emm_abund)

# Convert to data frame for ggplot
emm_abund_df <- as.data.frame(emm_abund)

# Plot the results
plot_abund <- ggplot(emm_abund_df, aes(x = year, y = emmean, color = treatment)) +
  geom_point(size = 3) +
  geom_line(aes(group = treatment), size = 1) +
  geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
  labs(title = "Estimated Marginal Means - Abundance",
       x = "Year",
       y = "Estimated Mean Value",
       color = "treatment") +
  theme_minimal()

plot_abund
```

###Analyze species richness using a poisson regression

```{r}
## Poisson regression model

# Convert Year and treatment to factors

sites_summary$treatment <- factor(sites_summary$treatment)

# Fit a Poisson regression model
poisson_model <- glmer(no_spp ~ treatment * year + sampling_events + (1 | site), data = sites_summary, family = poisson(link ="log"))

# Summary of the model
summary(poisson_model)

# Check for overdispersion
overdispersion_test <- sum(residuals(poisson_model, type = "pearson")^2) / df.residual(poisson_model)
print(paste("Overdispersion ratio of poisson:", overdispersion_test))

# Fit a negative binomial model
nb_model <- glm.nb(no_spp ~ treatment * year + sampling_events, data = sites_summary)


```

####Redo the analysis using a negative binomial

```{r}

# Summary of the negative binomial model
summary(nb_model)

# Extracting p-values
p_values <- summary(nb_model)$coefficients[, "Pr(>|z|)"]
print(p_values)

# Check for overdispersion
overdispersion_test <- sum(residuals(nb_model, type = "pearson")^2) / df.residual(nb_model)
print(paste("Overdispersion ratio:", overdispersion_test))




```
#### Poisson model of abundance

```{r}


## Poisson regression model

# Convert Year and treatment to factors

sites_summary$treatment <- factor(sites_summary$treatment)

# Fit a Poisson regression model
poisson_model <- glmer(abund ~ treatment * year + sampling_events + (1 | site), data = sites_summary, family = poisson(link ="log"))

# Summary of the model
summary(poisson_model)

# Check for overdispersion
overdispersion_test <- sum(residuals(poisson_model, type = "pearson")^2) / df.residual(poisson_model)
print(paste("Overdispersion ratio of poisson:", overdispersion_test))


```
#### Negative binomial model of abundance.


```{r}
# Fit a negative binomial model
nb_model <- glm.nb(no_spp ~ treatment * year + sampling_events, data = sites_summary)

# Summary of the negative binomial model
summary(nb_model)

# Extracting p-values
p_values <- summary(nb_model)$coefficients[, "Pr(>|z|)"]
print(p_values)

# Check for overdispersion
overdispersion_test <- sum(residuals(nb_model, type = "pearson")^2) / df.residual(nb_model)
print(paste("Overdispersion ratio:", overdispersion_test))
```
